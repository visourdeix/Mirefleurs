{% extends '@nucleus/partials/particle.html.twig' %}

{% block particle %}
<div class="{{ particle.class|e }}">
  	{% if particle.title %}<h2 class="g-title">{{ particle.title|raw }}</h2>{% endif %}

	<div class="g-chartist">
		<div class="ct-chart-{{ id }} ct-golden-section"></div>
	</div>

</div>
{% endblock %}

{% block javascript_footer %}
<script src="{{ url('gantry-theme://js/chartist.js') }}"></script>

{% if particle.type == "line" %}
	<script>
	var chart = new Chartist.Line('.ct-chart-{{ id }}', {
	  labels: [{{ particle.labelsData|raw }}],
	  series: [
	    {{ particle.seriesData|raw }}
	  ]  
	}, {
	  low: 0
	});
	</script>
{% elseif particle.type == "bar" %}
	<script>
	new Chartist.Bar('.ct-chart-{{ id }}', {
	  labels: [{{ particle.labelsData|raw }}],
	  series: [
	    {{ particle.seriesData|raw }}
	  ] 
	}, {
	  // Default mobile configuration
	  stackBars: true,
	  axisX: {
	    labelInterpolationFnc: function(value) {
	      return value.split(/\s+/).map(function(word) {
	        return word[0];
	      }).join('');
	    }
	  },
	  axisY: {
	    offset: 20
	  }
	}, [
	  // Options override for media > 400px
	  ['screen and (min-width: 400px)', {
	    reverseData: true,
	    horizontalBars: true,
	    axisX: {
	      labelInterpolationFnc: Chartist.noop
	    },
	    axisY: {
	      offset: 60
	    }
	  }],
	  // Options override for media > 800px
	  ['screen and (min-width: 800px)', {
	    stackBars: false,
	    seriesBarDistance: 10
	  }],
	  // Options override for media > 1000px
	  ['screen and (min-width: 1000px)', {
	    reverseData: false,
	    horizontalBars: false,
	    seriesBarDistance: 15
	  }]
	]);
	</script>
{% elseif particle.type == "pie" %}
	<script>
	var chart = new Chartist.Pie('.ct-chart-{{ id }}', {
	  series: [{{ particle.labelsData|raw }}],
	  labels: {{ particle.seriesData|raw }}  
	}, {
	  donut: true
	});

	function detectIE() {
	  var ua = window.navigator.userAgent;

	  var msie = ua.indexOf('MSIE ');
	  if (msie > 0) {
	    // IE 10 or older => return version number
	    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
	  }

	  var trident = ua.indexOf('Trident/');
	  if (trident > 0) {
	    // IE 11 => return version number
	    var rv = ua.indexOf('rv:');
	    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
	  }

	  var edge = ua.indexOf('Edge/');
	  if (edge > 0) {
	    // IE 12 => return version number
	    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
	  }

	  // other browser
	  return false;
	}

	chart.on('draw', function (data) {
	    if (data.type === 'slice') {
	        data.element.addClass("animated-slice");

	        // // Get the total path length in order to use for dash array animation
	        var pathLength = data.element._node.getTotalLength();
	        //
	        // // Set a dasharray that matches the path length as prerequisite to animate dashoffset
			if (detectIE() == false) {
			    data.element.attr({
			        'stroke-dasharray': pathLength + 'px ' + pathLength + 'px',
			        'stroke-dashoffset': -pathLength + 'px'
			    });
			}	                
	    }
	});

	// For the sake of the example we update the chart every time it's created with a delay of 8 seconds
	chart.on('created', function() {
	  if(window.__anim21278907124) {
	    clearTimeout(window.__anim21278907124);
	    window.__anim21278907124 = null;
	  }
	  window.__anim21278907124 = setTimeout(chart.update.bind(chart), 5000);
	});	
	</script>
{% endif %}
{% endblock %}